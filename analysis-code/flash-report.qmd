---
title: "Benchmarking experiment flash report"
author: "György Barabás"
format:
  pdf:
    keep-tex: false
    fontsize: 11pt
    documentclass: article
    papersize: a4paper
    margin-left: 1in
    margin-right: 1in
    margin-top: 1in
    margin-bottom: 1in
    code-block-border-left: false
knitr:
  opts_chunk:
    eval: true
    echo: false
    message: false
    warning: false
    fig-align: center
execute: 
  cache: false
editor_options: 
  chunk_output_type: console
latex-tinytex: false
---



```{r}
library(lme4)
library(jsonlite)
library(tidyverse)
library(ggbeeswarm)
library(knitr)


dat <- read_rds("../data/compiled-data.rds")
```

Marko has now collected all first-download data from the benchmarking experiment. The raw results are in @fig-empirical. Here we have a grid of panels, with 7 rows and 3 columns. The columns are three different servers used for downloading. The rows indicate storage platform and level of erasure coding (if applicable). Within each panel, file size is along the x-axis and retrieval time along the y-axis, both on the log scale. Colors show retrieval strategies: when erasure coding is absent, blue means NONE, whereas in the presence of erasure coding, it means DATA. Yellow indicates the RACE strategy. Each point is a single download event, and the points have been arranged to reflect the general shape of their distribution.

The main take-aways from this figure are:

-   Arweave's download times increase the slowest, though it also takes longer to download small files from it.
-   IPFS download times increase somewhat faster.
-   Swarm increases the fastest, so for large files it is the least efficient. This was expected, given its underlying DISC model.
-   Weirdly, the level of erasure coding does not appear to have much of an effect on download speeds.
-   The DATA and RACE retrieval strategies do lead to differences---these, however, are not as predictable as one might have expected. For larger files, sometimes RACE is faster, sometimes DATA.

One thing looks slightly strange. For Swarm and INSANE levels of erasure coding, under the RACE strategy and for 100MB files, the data are spread out very widely. In fact, on each of the three servers, 10% of these downloads were performed suspiciously fast:

```{r}
dat |>
  filter(erasure == "INSANE" & strategy == "RACE" & size == 100000) |>
  mutate(size = "100MB") |>
  summarize(
    `10% percentile download time (seconds)` = round(quantile(time_sec, 0.1), 2),
    .by = c(platform, erasure, strategy, size, server)
  ) |>
  kable()
```

We should double check this, because it feels absurd to download 100MB of data from Swarm in less than two seconds.

Otherwise, taking these data as they are, @fig-model shows model-predicted extrapolations made from them. As seen, RACE is on average not better than DATA for large files (the dashed lines lie above the solid ones for files over 1GB).

```{r}
#| out-width: 100%
#| fig-width: 8
#| fig-height: 10.5
#| fig-cap: Empirical results from the benchmarking experiment
#| label: fig-empirical
dat |>
  mutate(strategy = ifelse(strategy != "RACE", "NONE/DATA", "RACE")) |>
  mutate(pler = as_factor(case_when(
    platform != "Swarm" ~ platform,
    TRUE                ~ str_c(platform, ", ", erasure)
  ))) |>
  ggplot(aes(x = as_factor(size), y = time_sec, color = strategy, fill = strategy)) +
  geom_quasirandom(alpha = 0.5, shape = 1) +
  scale_x_discrete(labels = c("1KB", "10KB", "100KB", "1MB", "10MB", "100MB")) +
  scale_y_log10() +
  scale_color_manual(values = c("steelblue", "goldenrod")) +
  scale_fill_manual(values = c("steelblue", "goldenrod")) +
  labs(x = "File size", y = "Download time (seconds)") +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  facet_grid(pler ~ server) +
  theme_bw() +
  theme(legend.position = "bottom")
```

```{r}
#| out-width: 75%
#| fig-width: 6
#| fig-height: 4
#| fig-cap: Model-based predictions for mean file retrieval times.
#| label: fig-model
modelSwarm <-
  dat |>
  filter(platform == "Swarm") |>
  mutate(strategy = as_factor(ifelse(strategy != "RACE", "NONE/DATA", "RACE"))) |>
  mutate(erasure = case_match(
    erasure,
    "NONE"     ~ 0,
    "MEDIUM"   ~ 0.01,
    "STRONG"   ~ 0.05,
    "INSANE"   ~ 0.1,
    "PARANOID" ~ 0.5
  )) |>
  glmer(time_sec ~ I(log(size)^2) + erasure + strategy +
          I(log(size)^2):erasure + I(log(size)^2):strategy +
          erasure:strategy + (1 + erasure | server),
        data = _, family = gaussian(link = "log"))

modelIPFS <-
  dat |>
  filter(platform == "IPFS") |>
  glmer(time_sec ~ I(log(size)^3) + (1 + I(log(size)^3) | server),
        data = _, family = gaussian(link = "log"))

modelArweave <-
  dat |>
  filter(platform == "Arweave") |>
  glmer(time_sec ~ I(log(size)^3) + (1 + I(log(size)^3) | server),
        data = _, family = gaussian(link = "log"))

dat |>
  mutate(strategy = as_factor(ifelse(strategy != "RACE", "NONE/DATA", "RACE"))) |>
  mutate(erasure_text = erasure, .after = erasure) |>
  mutate(erasure = case_match(
    erasure,
    "NONE"     ~ 0,
    "MEDIUM"   ~ 0.01,
    "STRONG"   ~ 0.05,
    "INSANE"   ~ 0.1,
    "PARANOID" ~ 0.5
  )) |>
  distinct(platform, erasure, erasure_text, strategy) |>
  crossing(size = 10^seq(log10(1), log10(1e7), l = 201)) |>
  (\(x) mutate(x, pred = case_when(
    platform == "Arweave" ~ predict(modelArweave, x, re.form = NA, type = "response"),
    platform == "IPFS" ~ predict(modelIPFS, x, re.form = NA, type = "response"),
    platform == "Swarm" ~ predict(modelSwarm, x, re.form = NA, type = "response")
  )))() |>
  mutate(erasure = as_factor(erasure_text), .keep = "unused") |>
  ggplot(aes(x = size, y = pred, color = erasure, linetype = strategy,
             group = str_c(platform, erasure, strategy))) +
  geom_line() +
  scale_x_log10(breaks = c(1e1, 1e3, 1e5, 1e7),
                labels = c("10 KB", "1 MB", "100 MB", "10 GB")) +
  scale_y_log10(breaks = c(1, 60, 3600, 86400),
                labels = c("1s", "1m", "1h", "1d")) +
  scale_color_viridis_d(option = "C", end = 0.8) +
  annotate(geom = "text", label = "Arweave", x = 2e6, y = 9) +
  annotate(geom = "text", label = "IPFS", x = 6e6, y = 700) +
  annotate(geom = "text", label = "Swarm", x = 1e5, y = 900) +
  labs(x = "File size", y = "Predicted download time") +
  theme_bw()
```

